#!/usr/local/bin/ansible-playbook --inventory=inventory
- hosts: local,localhost
  become: true
  vars_files:
  - vars/environment.yml
  - vars/vault.yml
  vars:
    module: "generate agent installer config fies"
    ansible_name_module: " Pre Cluster Installation | {{ module }}"
  pre_tasks:
    - name: '{{ ansible_name_module }} | Ensure required variables are set'
      block:
        - assert:
            that:
              - cluster_name  is defined and cluster_name != ""
            msg: " the cluster_name must be set "
        - assert:
            that:
              - cluster_base_domain is defined and cluster_base_domain != ""
            msg: "the cluster_base_domain must be set and valid and will be the base domain used for cluster dns"
        - assert:
            that:
              - registry_ca_file is defined and registry_ca_file != ""
            msg: "the registry_ca_file must be set to a fully qualified file path and be a valid pem cert file"
        - assert:
            that:
              - registry_pull_secret_file is defined and registry_pull_secret_file != ""
            msg: "the registry_pull_secret_file must be set to a fully qualified file path and be a valid json"
        - assert:
            that:
              - cluster_osimage_uri is defined and cluster_osimage_uri != ""
            msg: "the cluster_osimage_uri must be defined and set to a valid http formatted URL"
          when:
            - overwrite_cluster_osimage is defined
            - overwrite_cluster_osimage | bool 
        - assert:
            that:
              - icsp_file is defined and icsp_file != ""
            msg: "the icsp_file must be defined and set to a valid path to the ICSP to use to fetch the payload from the private registry"
          when:
            - overwrite_cluster_osimage is defined
            - overwrite_cluster_osimage | bool 

    - name: '{{ ansible_name_module }} | Ensure required variables are set'
      when:
        - use_static_ips is defined
        - use_static_ips | bool
      block:
        - assert:
            that:
              - dns_servers is defined and dns_servers != ""
            msg: "the dns_servers must be set and valid "
        - assert:
            that:
              - gateway is defined and gateway != ""
            msg: "the gateway must be set and valid"
        - assert:
            that:
              - netmask is defined and netmask != ""
            msg: "the netmask  must be set and valid"
        - assert:
            that:
              -  interface == gateway_interface
            msg: "the  interface nd gateway_interface have to match when either is defined and must be set and valid"
          when:
            - (interface is defined and interface != '') or (gateway_interface is defined and gateway_interface != '')

  tasks:
    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ platform_staging_dir }}" 
        - "{{ platform_staging_dir }}/secrets/artifactory"
        - "{{ platform_staging_dir }}/ssh"
        - "{{ platform_staging_dir }}/install"
        - "{{ platform_staging_dir }}/ocp-tools" 
        - "{{ cluster_dir }}/config/"
        - "{{ cluster_dir }}/cluster-manifests/"
        - "{{ cluster_dir }}/cluster-template/"

    - name: Create registry crt
      ansible.builtin.copy:
        src: "{{ registry_ca_file }}"
        dest: "{{ platform_staging_dir }}/secrets/artifactory/registry.crt"
        owner: root
        group: root
        mode: '0600'
        force: true

    - name: '{{ ansible_name_module }} | Generate SSH key for cluster nodes'
      block:
        - name: '{{ ansible_name_module }} | ssh | file:directory | Create Directory Structure'
          ansible.builtin.file:
            path: '{{ ssh_key_dir }}'
            state: directory

        - name: '{{ ansible_name_module }} | openssh_keypair | Generate CloudCtl SSH Key Pair'
          community.crypto.openssh_keypair:
            path: "{{ ssh_key_dir }}/{{ ssh_key_name }}"
            comment: "core@ocp.kubeadmin"
            mode: 0600
            #type: ed25519
          register: ssh_key_created

    ##############################################################################
    ####### Install extracted OpenShift Clients for disconnected install
    - name: '{{ ansible_name_module }} | init | shell:openshift-install | generate coreos image info'
      when:
        - overwrite_cluster_osimage is defined
        - overwrite_cluster_osimage | bool 
        - not skip_tool_extraction is defined or not skip_tool_extraction | bool 
      block:
        - name: '{{ ansible_name_module }} | init | shell: | Install openshift-install retrieved from ocp payload' 
          ansible.builtin.shell: >
            tar xzvf {{ platform_staging_dir }}/ocp-tools/openshift-install-linux* -C {{ openshift_install_binary_location | default('/usr/local/bin', true) }}
          when:
            - overwrite_openshift_install is defined
            - overwrite_openshift_install | bool 
          register: ocp_tools_openshift_install_extracted 

        - name: '{{ ansible_name_module }} | init | shell: | Install openshift-client retrieved from ocp payload' 
          ansible.builtin.shell: >
            tar xzvf {{ platform_staging_dir }}/ocp-tools/openshift-client-linux* -C {{ openshift_client_binary_location | default('/usr/local/bin', true) }}
          when:
            - overwrite_openshift_client is defined
            - overwrite_openshift_client | bool 
          register: ocp_tools_openshift_client_extracted 

    ##############################################################################
    ####### Generate coreos image info 
    - name: '{{ ansible_name_module }} | init | shell:openshift-install | generate coreos image info'
      #when:
      #  - generate_coreos_image_info is defined
      #  - generate_coreos_image_info | bool 
      block:
        - name: '{{ ansible_name_module }} | init | shell:openshift-install | Retrieve image sha256 info' 
          ansible.builtin.shell: >
            {{ openshift_install_binary }} coreos print-stream-json | jq -r '.architectures.x86_64.artifacts.metal.formats.iso.disk.sha256'
          register: metal_iso_sha256

        - name: '{{ ansible_name_module }} | init | shell:openshift-install | Retrieve image location info' 
          ansible.builtin.shell: >
            {{ openshift_install_binary }} coreos print-stream-json | jq -r '.architectures.x86_64.artifacts.metal.formats.iso.disk.location'
          register: metal_iso_location

        - name: '{{ ansible_name_module }} | init | shell:openshift-install | Retrieve raw image sha256 info' 
          ansible.builtin.shell: >
             {{ openshift_install_binary }} coreos print-stream-json | jq -r '.architectures.x86_64.artifacts.metal.formats."raw.gz".disk.sha256'
          register: metal_raw_sha256

        - name: '{{ ansible_name_module }} | set_fact | Set cluster_osimage_sha256 default if not defined' 
          ansible.builtin.set_fact:
            cluster_osimage_sha256: "{{ metal_raw_sha256.stdout }}"
          when:
            - not cluster_osimage_sha256 is defined or cluster_osimage_sha256 == ''

        - name: '{{ ansible_name_module }} | init | shell:openshift-install | Retrieve raw image location info' 
          ansible.builtin.shell: >
            {{ openshift_install_binary }} coreos print-stream-json | jq -r '.architectures.x86_64.artifacts.metal.formats."raw.gz".disk.location'
          register: metal_raw_location

    ### Process CR templates
    - name: '{{ ansible_name_module }} | template | Render Agent config'
      ansible.builtin.template:
        src: "templates/agent-config.yaml.j2"
        dest: "{{ cluster_dir }}/config/agent-config.yaml"
        force: yes
      register: agent_config_created

    - name: '{{ ansible_name_module }} | template | Render Cluster install-config'
      ansible.builtin.template:
        src: "templates/install-config-agent.yaml.j2"
        dest: "{{ cluster_dir }}/config/install-config.yaml"
        force: yes
      register: agent_config_created

    ##########################################################
    ####### Generate Manifests ############################### 
    - name: '{{ ansible_name_module }} | Generate Manifests'
      when:
        - generate_manifests is defined
        - generate_manifests | bool 
      block:
        - name: Set default manifest_fole  variable if necessary
          ansible.builtin.set_fact:
            manifest_file: "install-config-baremetal.yaml.j2"
          when:
            - not manifest_file is defined or manifest_file == ''

        - name: '{{ ansible_name_module }} | template | Render Cluster install-config'
          ansible.builtin.template:
            src: "templates/{{ manifest_file }}"
            dest: "{{ cluster_dir }}/config/install-config.yaml"
            force: yes
          register: install_config_created

        ####### Clean Manifests Destination
        - name: '{{ ansible_name_module }} | file:absent | Clean/Purge Old dir'
          ansible.builtin.file:
            path: '{{ cluster_dir }}/manifests'
            state: absent

        - name: '{{ ansible_name_module }} | file:directory | '
          ansible.builtin.file:
            path: '{{ cluster_dir }}/manifests'
            state: directory
    
        ####### Stage install-config
        - name: '{{ ansible_name_module }} | init | file:copy | Place install-config.yaml agent-iso dir'
          ansible.builtin.copy:
            src: '{{ cluster_dir }}/config/install-config.yaml'
            dest: '{{ cluster_dir }}/manifests/install-config.yaml'
    
        ####### Generate Manifests 
        - name: '{{ ansible_name_module }} | init | shell:openshift-install | create agent-iso'
          ansible.builtin.shell: >
            {{ openshift_install_binary }} create manifests --dir={{ cluster_dir }}/manifests

        ####### Edit Manifests 
        - name: '{{ ansible_name_module }} | Edit Manifest if necessary'
          when:
            - edit_manifests is defined
            - edit_manifests | bool 
          block:
            ####### Detect manifest random id name
            - name: '{{ ansible_name_module }} | shell:awk | Get cluster random name'
              ansible.builtin.shell: "awk -F'[-]' '/infrastructureName/{print $NF}' {{ cluster_dir }}/manifests/manifests/cluster-infrastructure-02-config.yml"
              register: idrand
              ignore_errors: True
              no_log: True
            
            ####### replace manifest random id name
            - name: '{{ ansible_name_module }} | replace | s/randId/vpcName/g'
              ansible.builtin.replace:
                path: "{{ cluster_dir }}/manifests/manifests/cluster-infrastructure-02-config.yml"
                regexp: "infrastructureName: {{ cluster_name }}-{{ idrand.stdout }}"
                replace: "infrastructureName: {{ cluster_name }}"
              no_log: True
              ignore_errors: True
            
            ####### Itemize all manifest files
            - name: '{{ ansible_name_module }} | find |  Find all manifest files'
              ansible.builtin.find:
                path: "{{ cluster_dir }}/manifests"
                recurse: yes
                age: 1s
              register: manifests
            
            ####### Replace infrastructure name across all manifests
            - name: '{{ ansible_name_module }} | replace | Replace infrastructureName for all files'
              ansible.builtin.replace:
                path: "{{ item.path }}"
                regexp: "{{ cluster_name }}-{{ idrand.stdout }}"
                replace: "{{ cluster_name }}"
              no_log: True
              loop: "{{ manifests.files }}"

            ####### Remove Ingress Controller
            - name: '{{ ansible_name_module }} | Remove | Remove Ingress Controller'
              ansible.builtin.file:
                path: "{{ cluster_dir }}/manifests/manifests/cluster-ingress-default-ingresscontroller.yaml"
                state: absent
              when: external_ingress == 'true'
            
            ####### Remove Publish Internal
            - name: '{{ ansible_name_module }} | Remove | Remove Publish: Internal'
              ansible.builtin.lineinfile:
                path: "{{ cluster_dir }}/manifests/manifests/cluster-config.yaml"
                state: absent
                regexp: '^publish: Internal'
              when: external_ingress == 'true'
    
    ##############################################################################
    ####### Generate agent installer template 
    - name: '{{ ansible_name_module }} | init | shell:openshift-install | generate agent template'
      ansible.builtin.shell: >
        {{ openshift_install_binary }} agent create agent-config-template --dir={{ cluster_dir }}/cluster-template --log-level debug
      when:
        - generate_agent_template is defined
        - generate_agent_template | bool 

    ##############################################################################
    ####### Generate agent installer cluster manifests
    - name: '{{ ansible_name_module }} | init | shell:openshift-install | generate agent manifests'
      ansible.builtin.shell: >
        {{ openshift_install_binary }} agent create cluster-manifests --dir={{ cluster_dir }}/cluster-manifests --log-level debug
      when:
        - generate_agent_manifests is defined
        - generate_agent_manifests | bool 

    ##############################################################################
    ####### Generate agent installer iso 
    ####### Clean Manifests Destination  ########################################
    - name: '{{ ansible_name_module }} | init | file:absent | Clean/Purge Old iso'
      ansible.builtin.file:
        path: '{{ cluster_dir }}/agent-iso'
        state: absent
    - name: '{{ ansible_name_module }} | init | file:directory | Ensure directory exists'
      ansible.builtin.file:
        path: '{{ cluster_dir }}/agent-iso'
        state: directory
    
    ####### Stage install-config
    - name: '{{ ansible_name_module }} | init | file:copy | Place install-config.yaml agent-iso dir'
      ansible.builtin.copy:
        src: '{{ cluster_dir }}/config/install-config.yaml'
        dest: '{{ cluster_dir }}/agent-iso/install-config.yaml'
    
    ####### Stage agent-config
    - name: '{{ ansible_name_module }} | init | file:copy | Place install-config.yaml agent-iso dir'
      ansible.builtin.copy:
        src: '{{ cluster_dir }}/config/agent-config.yaml'
        dest: '{{ cluster_dir }}/agent-iso/agent-config.yaml'

    - name: '{{ ansible_name_module }} | init | shell:openshift-install | create agent-iso'
      ansible.builtin.shell: >
        {{ openshift_install_binary }} agent create image --dir={{ cluster_dir }}/agent-iso --log-level debug

    ####### Follow bootstrap node reboot 
    - name: '{{ ansible_name_module }} | init | shell:openshift-install | wait-for bootstrap-complete'
      ansible.builtin.shell: >
         {{ openshift_install_binary }} --dir={{ cluster_dir }}/agent-iso --log-level debug \
            agent wait-for bootstrap-complete
      when:
        - watch_bootstrap_complete is defined
        - watch_bootstrap_complete | bool 

    ####### Follow installation 
    - name: '{{ ansible_name_module }} | init | shell:openshift-install | wait-for install-complete'
      ansible.builtin.shell: >
         {{ openshift_install_binary }} --dir={{ cluster_dir }}/agent-iso --log-level debug \
            agent wait-for install-complete
      when:
        - watch_install_complete is defined
        - watch_install_complete | bool 

