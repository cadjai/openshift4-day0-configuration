####### Clean Manifests Destination
- name: '{{ ansible_name_module }} | file:absent | Clean/Purge Old dir'
  ansible.builtin.file:
    path: '{{ cluster_manifests_dir }}'
    state: absent

- name: '{{ ansible_name_module }} | file:directory '
  ansible.builtin.file:
    path: '{{ cluster_manifests_dir }}'
    state: directory

####### Stage install-config
- name: '{{ ansible_name_module }} | init | file:copy | Place install-config.yaml agent-iso dir'
  ansible.builtin.copy:
    src: '{{ cluster_install_config_file }}'
    dest: '{{ cluster_manifests_dir }}/install-config.yaml'

####### Stage agent-config
- name: '{{ ansible_name_module }} | init | file:copy | Place install-config.yaml agent-iso dir'
  ansible.builtin.copy:
    src: '{{ cluster_dir }}/config/agent-config.yaml'
    dest: '{{ cluster_manifests_dir }}/agent-config.yaml'
  when:
    - cluster_agent_config_file is defined 
    - cluster_agent_config_file != '' 

####### Generate Manifests 
- name: '{{ ansible_name_module }} | init | shell:openshift-install | create agent-iso'
  ansible.builtin.shell: >
    {{ openshift_install_binary }} {{ cluster_manifests_cmd }} --dir={{ cluster_manifests_dir }}
  register: manifests_created

####### Edit Manifests 
- name: '{{ ansible_name_module }} | Edit Manifest if necessary'
  when:
    - edit_manifests is defined
    - edit_manifests | bool 
    - cluster_manifests_cmd is defined
    - "not 'cluster-manifests' in cluster_manifests_cmd"
    - "not 'agent' in cluster_manifests_cmd"
  block:
    ####### Stage install-config
    - name: '{{ ansible_name_module }} | init | file:copy | Archive manifests'
      ansible.builtin.copy:
        src: '{{ cluster_manifests_dir }}'
        dest: '{{ cluster_manifests_dir }}-archive'
        directory_mode: 0777
      when:
        - archive_manifests is defined
        - archive_manifests | bool 

    ####### Detect manifest random id name
    - name: '{{ ansible_name_module }} | shell:awk | Get cluster random name'
      ansible.builtin.shell: "awk -F'[-]' '/infrastructureName/{print $NF}' {{ cluster_manifests_dir }}/manifests/cluster-infrastructure-02-config.yml"
      register: idrand
      ignore_errors: True
      no_log: True
    
    ####### replace manifest random id name
    - name: '{{ ansible_name_module }} | replace | s/randId/vpcName/g'
      ansible.builtin.replace:
        path: "{{ cluster_manifests_dir }}/manifests/cluster-infrastructure-02-config.yml"
        regexp: "infrastructureName: {{ cluster_name }}-{{ idrand.stdout }}"
        replace: "infrastructureName: {{ cluster_name }}"
      no_log: True
      ignore_errors: True
    
    ####### Itemize all manifest files
    - name: '{{ ansible_name_module }} | find |  Find all manifest files'
      ansible.builtin.find:
        path: "{{ cluster_manifests_dir }}"
        recurse: yes
        age: 1s
      register: manifests
    
    ####### Replace infrastructure name across all manifests
    - name: '{{ ansible_name_module }} | replace | Replace infrastructureName for all files'
      ansible.builtin.replace:
        path: "{{ item.path }}"
        regexp: "{{ cluster_name }}-{{ idrand.stdout }}"
        replace: "{{ cluster_name }}"
      no_log: True
      loop: "{{ manifests.files }}"

    ####### Remove Publish Internal
    - name: '{{ ansible_name_module }} | Remove | Remove Publish: Internal'
      ansible.builtin.lineinfile:
        path: "{{ cluster_manifests_dir }}/manifests/cluster-config.yaml"
        state: absent
        regexp: '^publish: Internal'
      when:
        - openshift_install_publish is defined 
        - openshift_install_publish != '' 
        - "'Internal' in openshift_install_publish"

    ####### Update router location 
    - name: '{{ ansible_name_module }} | Replace | Update Router pod placement'
      ansible.builtin.replace:
        path: "{{ cluster_manifests_dir }}/manifests/cluster-ingress-02-config.yml"
        regexp: "defaultPlacement: Workers"
        replace: "defaultPlacement: Masters"

    ####### Make Master Schedulable 
    - name: '{{ ansible_name_module }} | Replace | make Master Schedulable'
      ansible.builtin.replace:
        path: "{{ cluster_manifests_dir }}/manifests/cluster-scheduler-02-config.yml"
        regexp: "mastersSchedulable: false"
        replace: "mastersSchedulable: true"
      when:
        - make_masters_schedulable is defined
        - make_masters_schedulable | bool 

####### Ensure that the openshift sub directory exists 
- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: "{{ cluster_manifests_dir }}/openshift"
    state: directory
    mode: '0755'
  when:
    - cluster_manifests_cmd is defined
    - "'cluster-manifests' in cluster_manifests_cmd or 'agent' in cluster_manifests_cmd"

####### Update router replicas
- name: '{{ ansible_name_module }} | template | Update Router replicas'
  ansible.builtin.template:
    src: 'templates/default-router-replicas.yaml.j2'
    dest: '{{ cluster_manifests_dir }}/openshift/99_router-replicas.yaml'
    force: true
  when:
    - update_router_replicas is defined
    - update_router_replicas | bool 

####### Add Separate Var Partition 
- name: '{{ ansible_name_module }} | Add Separate Var Partition'
  when:
    - add_var_partition is defined
    - add_var_partition | bool
  block:
    - name: '{{ ansible_name_module }} | assert | ensure that nmstatectl is installed '
      assert:
        that:
          - node_disk_id is defined
          - node_disk_id != '' 
          - node_disk_partition_size is defined
          - node_disk_partition_size != '' 
        msg: "The node_disk_id and node_disk_partition_size are required to add a separate var partition"

    - name: '{{ ansible_name_module }} | command | ensure that butane is installed '
      ansible.builtin.command: which butane 
      ignore_errors: yes
      failed_when:
        - butane_binary_check.rc > 0
        - "not 'no butane' in butane_binary_check.stderr"
      register: butane_binary_check

    - name: '{{ ansible_name_module }} | assert | ensure that butane is installed '
      assert:
        that:
          - butane_binary_check is defined
          - butane_binary_check.rc is defined
          - butane_binary_check.rc == 0
        msg: "The butane binary is required on the controller to create the MC for the var partition"

    - name: '{{ ansible_name_module }} | set_fact | Set cluster_osimage_sha256 default if not defined' 
      ansible.builtin.set_fact:
        openshift_version: "{{ (release_image_tag.split('.')[0] + '.' + release_image_tag.split('.')[1] + '.0') | default('4.12.0', true) }}"
      when:
        - not openshift_version is defined or openshift_version == ''

    - name: '{{ ansible_name_module }} | template | Render Var Partition butane file'
      ansible.builtin.template:
        src: 'templates/98-var-partition.bu.j2'
        dest: "{{ staging_dir | default('/tmp', true) }}/98-var-partition.bu"
        force: true
      register: var_part_bu_config_created 

    - name: '{{ ansible_name_module }} | command | Render var partition MC '
      ansible.builtin.command: >
        {{ butane_binary_check.stdout }} {{ staging_dir | default('/tmp', true) }}/98-var-partition.bu \
        -o {{ cluster_manifests_dir }}/openshift/98-var-partition.yaml 
      register: var_part_mc_config_created 

####### Add NTP Configuration 
- name: '{{ ansible_name_module }} | Add Node NTP Config'
  when:
    - add_ntp_servers is defined
    - add_ntp_servers | bool
  block:
    - name: '{{ ansible_name_module }} | assert | ensure that nmstatectl is installed '
      assert:
        that:
          - ntp_servers is defined
          - ntp_servers | d([]) | length > 0 
        msg: "The ntp_servers is required to add NTP configuration "

    - name: '{{ ansible_name_module }} | command | ensure that butane is installed '
      ansible.builtin.command: which butane 
      ignore_errors: yes
      failed_when:
        - butane_binary_check.rc > 0
        - "not 'no butane' in butane_binary_check.stderr"
      register: butane_binary_check

    - name: '{{ ansible_name_module }} | assert | ensure that butane is installed '
      assert:
        that:
          - butane_binary_check is defined
          - butane_binary_check.rc is defined
          - butane_binary_check.rc == 0
        msg: "The butane binary is required on the controller to create the MC for the var partition"

    - name: '{{ ansible_name_module }} | set_fact | Set cluster_osimage_sha256 default if not defined' 
      ansible.builtin.set_fact:
        openshift_version: "{{ (release_image_tag.split('.')[0] + '.' + release_image_tag.split('.')[1] + '.0') | default('4.12.0', true) }}"
      when:
        - not openshift_version is defined or openshift_version == ''

    - name: '{{ ansible_name_module }} | template | Render Node NTP butane file'
      ansible.builtin.template:
        src: 'templates/99-node-chrony.bu.j2'
        dest: "{{ staging_dir | default('/tmp', true) }}/99-{{ node_role }}-chrony.bu"
        force: true
      loop:
        - master
        - worker
      vars:
        node_role: "{{ item }}"
      register: node_ntp_bu_config_created 

    - name: '{{ ansible_name_module }} | command | Render Node NTP MC '
      ansible.builtin.command: >
        {{ butane_binary_check.stdout }} {{ staging_dir | default('/tmp', true) }}/99-{{ node_role }}-chrony.bu \
        -o {{ cluster_manifests_dir }}/openshift/99-{{ node_role }}-chrony.yaml
      loop:
        - master
        - worker
      vars:
        node_role: "{{ item }}"
      register: node_ntp_mc_config_created 
